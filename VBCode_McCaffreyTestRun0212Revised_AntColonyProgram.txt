Imports Microsoft.VisualBasic
Imports System

' Demo of Ant Colony Optimization (ACO) solving a Traveling Salesman Problem (TSP).
' There are many variations of ACO; this is just one approach.
' The problem to solve has a program defined number of cities. We assume that every
' city is connected to every other city. The distance between cities is artificially
' set so that the distance between any two cities is a random value between 1 and 8
' Cities wrap, so if there are 20 cities then D(0,19) = D(19,0).
' Free parameters are alpha, beta, rho, and Q. Hard-coded constants limit min and max
' values of pheromones.

Namespace AntColony
  Friend Class AntColonyProgram
	Private Shared random As New Random(0)

	Private Shared alpha As Integer = 3 ' influence of pheromone on direction
	Private Shared beta As Integer = 2 ' influence of adjacent node distance

	Private Shared rho As Double = 0.01 ' pheromone decrease factor
	Private Shared Q As Double = 2.0 ' pheromone increase factor

	Shared Sub Main(ByVal args() As String)
	  Try
		Console.WriteLine(vbLf & "Begin Ant Colony Optimization demo" & vbLf)

		Dim numCities As Integer = 60
		Dim numAnts As Integer = 4
		Dim maxTime As Integer = 1000

		Console.WriteLine("Number cities in problem = " & numCities)

		Console.WriteLine(vbLf & "Number ants = " & numAnts)
		Console.WriteLine("Maximum time = " & maxTime)

		Console.WriteLine(vbLf & "Alpha (pheromone influence) = " & alpha)
		Console.WriteLine("Beta (local node influence) = " & beta)
		Console.WriteLine("Rho (pheromone evaporation coefficient) = " & rho.ToString("F2"))
		Console.WriteLine("Q (pheromone deposit factor) = " & Q.ToString("F2"))

		Console.WriteLine(vbLf & "Initialing dummy graph distances")
		Dim dists()() As Integer = MakeGraphDistances(numCities)

		Console.WriteLine(vbLf & "Initialing ants to random trails" & vbLf)
		Dim ants()() As Integer = InitAnts(numAnts, numCities) ' initialize ants to random trails
		ShowAnts(ants, dists)

		Dim bestTrail() As Integer = AntColonyProgram.BestTrail(ants, dists) ' determine the best initial trail
		Dim bestLength As Double = Length(bestTrail, dists) ' the length of the best trail

		Console.Write(vbLf & "Best initial trail length: " & bestLength.ToString("F1") & vbLf)
		'Display(bestTrail);

		Console.WriteLine(vbLf & "Initializing pheromones on trails")
		Dim pheromones()() As Double = InitPheromones(numCities)

		Dim time As Integer = 0
		Console.WriteLine(vbLf & "Entering UpdateAnts - UpdatePheromones loop" & vbLf)
		Do While time < maxTime
		  UpdateAnts(ants, pheromones, dists)
		  UpdatePheromones(pheromones, ants, dists)

		  Dim currBestTrail() As Integer = AntColonyProgram.BestTrail(ants, dists)
		  Dim currBestLength As Double = Length(currBestTrail, dists)
		  If currBestLength < bestLength Then
			bestLength = currBestLength
			bestTrail = currBestTrail
			Console.WriteLine("New best length of " & bestLength.ToString("F1") & " found at time " & time)
		  End If
		  time += 1
		Loop

		Console.WriteLine(vbLf & "Time complete")

		Console.WriteLine(vbLf & "Best trail found:")
		Display(bestTrail)
		Console.WriteLine(vbLf & "Length of best trail found: " & bestLength.ToString("F1"))

		Console.WriteLine(vbLf & "End Ant Colony Optimization demo" & vbLf)
		Console.ReadLine()
	  Catch ex As Exception
		Console.WriteLine(ex.Message)
		Console.ReadLine()
	  End Try

	End Sub ' Main

	' --------------------------------------------------------------------------------------------

	Private Shared Function InitAnts(ByVal numAnts As Integer, ByVal numCities As Integer) As Integer()()
	  Dim ants(numAnts - 1)() As Integer
	  For k As Integer = 0 To numAnts - 1
		Dim start As Integer = random.Next(0, numCities)
		ants(k) = RandomTrail(start, numCities)
	  Next k
	  Return ants
	End Function

	Private Shared Function RandomTrail(ByVal start As Integer, ByVal numCities As Integer) As Integer() ' helper for InitAnts
	  Dim trail(numCities - 1) As Integer

	  For i As Integer = 0 To numCities - 1 ' sequential
		  trail(i) = i
	  Next i

	  For i As Integer = 0 To numCities - 1 ' Fisher-Yates shuffle
		Dim r As Integer = random.Next(i, numCities)
		Dim tmp As Integer = trail(r)
		trail(r) = trail(i)
		trail(i) = tmp
	  Next i

	  Dim idx As Integer = IndexOfTarget(trail, start) ' put start at [0]
	  Dim temp As Integer = trail(0)
	  trail(0) = trail(idx)
	  trail(idx) = temp

	  Return trail
	End Function

	Private Shared Function IndexOfTarget(ByVal trail() As Integer, ByVal target As Integer) As Integer ' helper for RandomTrail
	  For i As Integer = 0 To trail.Length - 1
		If trail(i) = target Then
		  Return i
		End If
	  Next i
	  Throw New Exception("Target not found in IndexOfTarget")
	End Function

	Private Shared Function Length(ByVal trail() As Integer, ByVal dists()() As Integer) As Double ' total length of a trail
	  Dim result As Double = 0.0
	  For i As Integer = 0 To trail.Length - 2
		result += Distance(trail(i), trail(i + 1), dists)
	  Next i
	  Return result
	End Function

	' -------------------------------------------------------------------------------------------- 

	Private Shared Function BestTrail(ByVal ants()() As Integer, ByVal dists()() As Integer) As Integer() ' best trail has shortest total length
	  Dim bestLength As Double = Length(ants(0), dists)
	  Dim idxBestLength As Integer = 0
	  For k As Integer = 1 To ants.Length - 1
		Dim len As Double = Length(ants(k), dists)
		If len < bestLength Then
		  bestLength = len
		  idxBestLength = k
		End If
	  Next k
	  Dim numCities As Integer = ants(0).Length
'INSTANT VB NOTE: The local variable bestTrail was renamed since Visual Basic will not allow local variables with the same name as their enclosing function or property:
	  Dim bestTrail_Renamed(numCities - 1) As Integer
	  ants(idxBestLength).CopyTo(bestTrail_Renamed, 0)
	  Return bestTrail_Renamed
	End Function

	' --------------------------------------------------------------------------------------------

	Private Shared Function InitPheromones(ByVal numCities As Integer) As Double()()
	  Dim pheromones(numCities - 1)() As Double
	  For i As Integer = 0 To numCities - 1
		pheromones(i) = New Double(numCities - 1){}
	  Next i
	  For i As Integer = 0 To pheromones.Length - 1
		For j As Integer = 0 To pheromones(i).Length - 1
		  pheromones(i)(j) = 0.01 ' otherwise first call to UpdateAnts -> BuiuldTrail -> NextNode -> MoveProbs => all 0.0 => throws
		Next j
	  Next i
	  Return pheromones
	End Function

	' --------------------------------------------------------------------------------------------

	Private Shared Sub UpdateAnts(ByVal ants()() As Integer, ByVal pheromones()() As Double, ByVal dists()() As Integer)
	  Dim numCities As Integer = pheromones.Length
	  For k As Integer = 0 To ants.Length - 1
		Dim start As Integer = random.Next(0, numCities)
		Dim newTrail() As Integer = BuildTrail(k, start, pheromones, dists)
		ants(k) = newTrail
	  Next k
	End Sub

	Private Shared Function BuildTrail(ByVal k As Integer, ByVal start As Integer, ByVal pheromones()() As Double, ByVal dists()() As Integer) As Integer()
	  Dim numCities As Integer = pheromones.Length
	  Dim trail(numCities - 1) As Integer
	  Dim visited(numCities - 1) As Boolean
	  trail(0) = start
	  visited(start) = True
	  For i As Integer = 0 To numCities - 2
		Dim cityX As Integer = trail(i)
		Dim [next] As Integer = NextCity(k, cityX, visited, pheromones, dists)
		trail(i + 1) = [next]
		visited([next]) = True
	  Next i
	  Return trail
	End Function

	Private Shared Function NextCity(ByVal k As Integer, ByVal cityX As Integer, ByVal visited() As Boolean, ByVal pheromones()() As Double, ByVal dists()() As Integer) As Integer
	  ' for ant k (with visited[]), at nodeX, what is next node in trail?
	  Dim probs() As Double = MoveProbs(k, cityX, visited, pheromones, dists)

	  Dim cumul(probs.Length) As Double
	  For i As Integer = 0 To probs.Length - 1
		cumul(i + 1) = cumul(i) + probs(i) ' consider setting cumul[cuml.Length-1] to 1.00
	  Next i

	  Dim p As Double = random.NextDouble()

	  For i As Integer = 0 To cumul.Length - 2
		If p >= cumul(i) AndAlso p < cumul(i + 1) Then
		  Return i
		End If
	  Next i
	  Throw New Exception("Failure to return valid city in NextCity")
	End Function

	Private Shared Function MoveProbs(ByVal k As Integer, ByVal cityX As Integer, ByVal visited() As Boolean, ByVal pheromones()() As Double, ByVal dists()() As Integer) As Double()
	  ' for ant k, located at nodeX, with visited[], return the prob of moving to each city
	  Dim numCities As Integer = pheromones.Length
	  Dim taueta(numCities - 1) As Double ' inclues cityX and visited cities
	  Dim sum As Double = 0.0 ' sum of all tauetas
	  For i As Integer = 0 To taueta.Length - 1 ' i is the adjacent city
		If i = cityX Then
		  taueta(i) = 0.0 ' prob of moving to self is 0
		ElseIf visited(i) = True Then
		  taueta(i) = 0.0 ' prob of moving to a visited city is 0
		Else
		  taueta(i) = Math.Pow(pheromones(cityX)(i), alpha) * Math.Pow((1.0 / Distance(cityX, i, dists)), beta) ' could be huge when pheromone[][] is big
		  If taueta(i) < 0.0001 Then
			taueta(i) = 0.0001
		  ElseIf taueta(i) > (Double.MaxValue / (numCities * 100)) Then
			taueta(i) = Double.MaxValue / (numCities * 100)
		  End If
		End If
		sum += taueta(i)
	  Next i

	  Dim probs(numCities - 1) As Double
	  For i As Integer = 0 To probs.Length - 1
		probs(i) = taueta(i) / sum ' big trouble if sum = 0.0
	  Next i
	  Return probs
	End Function

	' --------------------------------------------------------------------------------------------

	Private Shared Sub UpdatePheromones(ByVal pheromones()() As Double, ByVal ants()() As Integer, ByVal dists()() As Integer)
	  For i As Integer = 0 To pheromones.Length - 1
		For j As Integer = i + 1 To pheromones(i).Length - 1
		  For k As Integer = 0 To ants.Length - 1
			Dim length As Double = AntColonyProgram.Length(ants(k), dists) ' length of ant k trail
			Dim decrease As Double = (1.0 - rho) * pheromones(i)(j)
			Dim increase As Double = 0.0
			If EdgeInTrail(i, j, ants(k)) = True Then
				increase = (Q / length)
			End If

			pheromones(i)(j) = decrease + increase

			If pheromones(i)(j) < 0.0001 Then
			  pheromones(i)(j) = 0.0001
			ElseIf pheromones(i)(j) > 100000.0 Then
			  pheromones(i)(j) = 100000.0
			End If

			pheromones(j)(i) = pheromones(i)(j)
		  Next k
		Next j
	  Next i
	End Sub

	Private Shared Function EdgeInTrail(ByVal cityX As Integer, ByVal cityY As Integer, ByVal trail() As Integer) As Boolean
	  ' are cityX and cityY adjacent to each other in trail[]?
	  Dim lastIndex As Integer = trail.Length - 1
	  Dim idx As Integer = IndexOfTarget(trail, cityX)

	  If idx = 0 AndAlso trail(1) = cityY Then
		  Return True
	  ElseIf idx = 0 AndAlso trail(lastIndex) = cityY Then
		  Return True
	  ElseIf idx = 0 Then
		  Return False
	  ElseIf idx = lastIndex AndAlso trail(lastIndex - 1) = cityY Then
		  Return True
	  ElseIf idx = lastIndex AndAlso trail(0) = cityY Then
		  Return True
	  ElseIf idx = lastIndex Then
		  Return False
	  ElseIf trail(idx - 1) = cityY Then
		  Return True
	  ElseIf trail(idx + 1) = cityY Then
		  Return True
	  Else
		  Return False
	  End If
	End Function


	' --------------------------------------------------------------------------------------------

	Private Shared Function MakeGraphDistances(ByVal numCities As Integer) As Integer()()
	  Dim dists(numCities - 1)() As Integer
	  For i As Integer = 0 To dists.Length - 1
		dists(i) = New Integer(numCities - 1){}
	  Next i
	  For i As Integer = 0 To numCities - 1
		For j As Integer = i + 1 To numCities - 1
		  Dim d As Integer = random.Next(1, 9) ' [1,8]
		  dists(i)(j) = d
		  dists(j)(i) = d
		Next j
	  Next i
	  Return dists
	End Function

	Private Shared Function Distance(ByVal cityX As Integer, ByVal cityY As Integer, ByVal dists()() As Integer) As Double
	  Return dists(cityX)(cityY)
	End Function

	' --------------------------------------------------------------------------------------------

	Private Shared Sub Display(ByVal trail() As Integer)
	  For i As Integer = 0 To trail.Length - 1
		Console.Write(trail(i) & " ")
		If i > 0 AndAlso i Mod 20 = 0 Then
			Console.WriteLine("")
		End If
	  Next i
	  Console.WriteLine("")
	End Sub


	Private Shared Sub ShowAnts(ByVal ants()() As Integer, ByVal dists()() As Integer)
	  For i As Integer = 0 To ants.Length - 1
		Console.Write(i & ": [ ")

		For j As Integer = 0 To 3
		  Console.Write(ants(i)(j) & " ")
		Next j

		Console.Write(". . . ")

		For j As Integer = ants(i).Length - 4 To ants(i).Length - 1
		  Console.Write(ants(i)(j) & " ")
		Next j

		Console.Write("] len = ")
		Dim len As Double = Length(ants(i), dists)
		Console.Write(len.ToString("F1"))
		Console.WriteLine("")
	  Next i
	End Sub

	Private Shared Sub Display(ByVal pheromones()() As Double)
	  For i As Integer = 0 To pheromones.Length - 1
		Console.Write(i & ": ")
		For j As Integer = 0 To pheromones(i).Length - 1
		  Console.Write(pheromones(i)(j).ToString("F4").PadLeft(8) & " ")
		Next j
		Console.WriteLine("")
	  Next i

	End Sub

  End Class ' class AntColonyProgram

End Namespace ' ns